/**
 *	jQuery Plugin to filter Packages and Classes in a Tree generated by DocCreater (theme:cm1).
 *	Needs plugin cmExpr.containsIgnoreCase.
 *	@name		cmDocTreeSearch
 *	@type		jQuery
 *	@cat		Plugins/UI
 *	@author		Christian Würker <Christian.Wuerker@CeuS-Media.de>
 *	@copyright	2009 Christian Würker <Christian.Wuerker@CeuS-Media.de> (http://ceus-media.de)
 *	@license	LGPL/CC
 *	@param		Object		settings (optional) 	Customize behaviour or Search Plugin
 */
;(function($){
  jQuery.fn.cmDocTreeSearch = function(settings){
    var container = this;
    settings = jQuery.extend({
      selectorTree  : "#tree",
      selectorInput : "#tree-query",
      hilightQuery  : false,
      classHilight  : "hilight"
    },settings);

    var tree = $(settings.selectorTree);															//  shortcut Tree Node
    var lastQuery = "";																				//  we'll store the last value of Query Input Field to avoid senseless UI updates

    $("a.class,a.interface",tree).bind('hilightQuery',function(){									//  bind Event Handler to hilight searched Strings in Package and Class List Item Names
      query=$(settings.selectorInput).val();														//  get current Query String
      label=$(this);																				//  get Label of List Item
      value=label.html();																			//  get HTML Content of Label
      exp=new RegExp( "("+query+")", "g" );															//  create new RegExp with Query String
      value=value.replace(exp,'<b class="'+settings.classHilight+'">$1</b>');						//  replace Matches with Hilight Code
      label.html(value);																			//  write back Label Content
    });

    $("a.class,a.interface",tree).bind('unhilight',function(){										//  bind Event Handler to remove set Hilight (can only be one)
      label=$(this);																				//  get Label of List Item
      value=label.html();																			//  get HTML Content of Label
      exp=new RegExp("<[^>]+>([^<]+)<\/[^>]+>","g");												//  create new RegExp for Hilight HTML Tag
      value=value.replace(exp,"$1");																//  remove Hilight HTML Tag
      label.html(value);																			//  write back Label Content
    });

    this.foldTreeAfterSearch = function(node){
      $(">div.hitarea",node).parent().each(function(){
        hitarea=$('>div.hitarea',this);
        if(!hitarea)
          return;
        found=$("b."+settings.classHilight,this).size()>0;
        close=$(">ul:visible",this).size()==0;
        if(close && found || (!close && !found))
          hitarea.trigger('click');
      });
      $(">ul>li",node).each(function(){
        container.foldTreeAfterSearch(this);
      });
    }

    $(settings.selectorInput).keyup(function(){
      var query=$(this).val();
      if(query!=lastQuery){
        lastQuery=query;
        $(settings.selectorInput).removeClass('found').removeClass('unfound');
        $(settings.selectorInput).addClass('searching');
        if(query){
          $("li>a.class,li>a.interface",tree).each(function(){
            $(this).trigger('unhilight');
            if($(this).filter(":contains('"+query+"')").size())
              $(this).trigger('hilightQuery');
          });
          found=$("li a b",settings.selectorTree).size();
          $(settings.selectorInput).addClass(found?'found':'unfound');
          $(">ul>li",$(settings.selectorTree)).each(function(){
            container.foldTreeAfterSearch(this);
          });
        }
        else{
          $("li>a",tree).trigger('unhilight');
          $("li.collapsable>div.hitarea",tree).trigger('click');
        }
        $(settings.selectorInput).removeClass('searching');
      }
    });
    $(settings.selectorInput).focus();
  }
})(jQuery);
